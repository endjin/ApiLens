<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Linq</name>
    </assembly>
    <members>
        <member name="T:System.Linq.Enumerable">
            <summary>Provides a set of static (Shared in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
        </member>
        <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Projects each element of a sequence into a new form.</summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the value returned by selector.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking the transform function on each element of source.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Filters a sequence of values based on a predicate.</summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException">source or predicate is null.</exception>
            <seealso cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>
        </member>
    </members>
</doc>